{"version":3,"sources":["index.tsx"],"names":["App","React","constructor","props","super","this","state","quote","answer","componentDidMount","renderCanvas","componentDidUpdate","canvas","document","getElementById","context","getContext","img","Image","src","process","onload","drawImage","lineWidth","fillStyle","font","lineHeight","textAlign","x","y","lines","split","i","length","fillText","downloadCanvas","link","createElement","download","href","toDataURL","click","handleQuoteChange","event","setState","target","value","handleAnswerChange","render","className","onChange","id","width","height","rootElement"],"mappings":"qJAAA,oCAKA,MAAMA,UAAYC,YACdC,YAAYC,GACRC,MAAMD,GACNE,KAAKC,MAAQ,CACTC,MAAO,2BACPC,OAAQ,oFAITC,oBACHJ,KAAKK,aAAaL,KAAKC,MAAMC,MAAOF,KAAKC,MAAME,QAG5CG,qBACHN,KAAKK,aAAaL,KAAKC,MAAMC,MAAOF,KAAKC,MAAME,QAG5CE,aAAaH,EAAeC,GAC/B,IAAII,EAASC,SAASC,eAAe,UACrC,GAAe,OAAXF,EACA,OAEJ,IAAIG,EAAUH,EAAOI,WAAW,MAC5BC,EAAM,IAAIC,MACdD,EAAIE,IAAMC,wBACVH,EAAII,OAAS,KAETN,EAAQO,UAAUL,EAAK,EAAG,GAC1BF,EAAQQ,UAAY,EACpBR,EAAQS,UAAY,UACpBT,EAAQU,KAAOC,sBACfX,EAAQY,UAAY,SACpB,IAAIC,EAAI,IACJC,EAAI,GACJC,EAAQvB,EAAMwB,MAAM,MACxB,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAAMG,OAAQD,GAAK,EACnCjB,EAAQmB,SAASJ,EAAME,GAAIJ,EAAGC,EAVjB,GAUqBG,GAEtCJ,EAAI,IACJC,EAAI,GACJC,EAAQtB,EAAOuB,MAAM,MACrB,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAAMG,OAAQD,GAAK,EACnCjB,EAAQmB,SAASJ,EAAME,GAAIJ,EAAGC,EAhBjB,GAgBqBG,IAKvCG,iBACH,IAAIC,EAAOvB,SAASwB,cAAc,KAClCD,EAAKE,SAAW,aAChBF,EAAKG,KAAQ1B,SAASC,eAAe,UAAgC0B,UAAU,cAC/EJ,EAAKK,QAGFC,kBAAkBC,GACrBtC,KAAKuC,SAAS,CACVrC,MAAOoC,EAAME,OAAOC,QAIrBC,mBAAmBJ,GACtBtC,KAAKuC,SAAS,CACVpC,OAAQmC,EAAME,OAAOC,QAItBE,SACH,OACI,uBAAKC,UAAU,iBACX,uBAAKA,UAAU,mCACX,uBAAKA,UAAU,2BACX,4BACIA,UAAU,eACVH,MAAOzC,KAAKC,MAAMC,MAClB2C,SAAWP,GAAUtC,KAAKqC,kBAAkBC,MAGpD,uBAAKM,UAAU,2BACX,4BACIA,UAAU,eACVH,MAAOzC,KAAKC,MAAME,OAClB0C,SAAWP,GAAUtC,KAAK0C,mBAAmBJ,OAIzD,uBAAKM,UAAU,mCACX,uBAAKA,UAAU,wCACX,0BACIA,UAAU,YACVE,GAAG,SACHC,MAAM,MACNC,OAAO,YASnC,MAAMC,EAAczC,SAASC,eAAe,QAC5CkC,iBAAO,gBAAChD,EAAD,MAASsD,K","file":"static/js/main.5d6c3e37.chunk.js","sourcesContent":["import * as React from \"react\";\nimport { render } from \"react-dom\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"./styles.css\";\n\nclass App extends React.Component<any, any> {\n    constructor(props: any) {\n        super(props);\n        this.state = {\n            quote: \"Le discours progressiste\",\n            answer: \"Vous êtes bête contrairement à moi\\n(Xavier Gorce) qui suit intelligent\"\n        };\n    }\n\n    public componentDidMount() {\n        this.renderCanvas(this.state.quote, this.state.answer);\n    }\n\n    public componentDidUpdate() {\n        this.renderCanvas(this.state.quote, this.state.answer);\n    }\n\n    public renderCanvas(quote: string, answer: string) {\n        var canvas = document.getElementById('canvas') as HTMLCanvasElement;\n        if (canvas === null) {\n            return;\n        }\n        let context = canvas.getContext('2d')!;\n        let img = new Image();\n        img.src = process.env.PUBLIC_URL + \"/background.png\";\n        img.onload = () => {\n            let lineHeight = 18;\n            context.drawImage(img, 0, 0);\n            context.lineWidth = 1;\n            context.fillStyle = \"#000000\";\n            context.font = lineHeight + \"px 'Indie Flower'\";\n            context.textAlign = \"center\";\n            let x = 150;\n            let y = 40;\n            let lines = quote.split(\"\\n\");\n            for (let i = 0; i < lines.length; i += 1) {\n                context.fillText(lines[i], x, y + i * lineHeight);\n            }\n            x = 420;\n            y = 50;\n            lines = answer.split(\"\\n\");\n            for (let i = 0; i < lines.length; i += 1) {\n                context.fillText(lines[i], x, y + i * lineHeight);\n            }\n        };\n    }\n\n    public downloadCanvas() {\n        var link = document.createElement('a');\n        link.download = 'gorce.jpeg';\n        link.href = (document.getElementById('canvas') as HTMLCanvasElement).toDataURL('image/jpeg')\n        link.click();\n    }\n\n    public handleQuoteChange(event: any) {\n        this.setState({\n            quote: event.target.value\n        });\n    }\n\n    public handleAnswerChange(event: any) {\n        this.setState({\n            answer: event.target.value\n        });\n    }\n\n    public render() {\n        return (\n            <div className=\"container p-3\">\n                <div className=\"row justify-content-center mt-5\">\n                    <div className=\"col-sm-12 col-md-4 mb-1\">\n                        <textarea\n                            className=\"form-control\"\n                            value={this.state.quote}\n                            onChange={(event) => this.handleQuoteChange(event)}\n                        ></textarea>\n                    </div>\n                    <div className=\"col-sm-12 col-md-4 mb-1\">\n                        <textarea\n                            className=\"form-control\"\n                            value={this.state.answer}\n                            onChange={(event) => this.handleAnswerChange(event)}\n                        ></textarea>\n                    </div>\n                </div>\n                <div className=\"row justify-content-center mt-3\">\n                    <div className=\"col-12 d-flex justify-content-center\">\n                        <canvas\n                            className=\"img-fluid\"\n                            id=\"canvas\"\n                            width=\"560\"\n                            height=\"287\"\n                        ></canvas>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst rootElement = document.getElementById(\"root\");\nrender(<App />, rootElement);\n"],"sourceRoot":""}